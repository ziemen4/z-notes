{"version":3,"file":"component---src-pages-index-js-b168489d6aa047ffc955.js","mappings":"+HAiDA,IAvCYA,IAAuC,IAADC,EAAAC,EAAAC,EAAA,IAArC,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAUN,EAC3C,MAAM,KAAEO,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApBV,EAAGM,EAAKG,oBAAY,IAAAT,OAAA,EAAjBA,EAAmBI,MAExC,OACEO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQD,EAAe,GAAGN,OAAWM,IAAiBN,GACtDO,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASL,IAClCG,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAAST,IACnCO,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASL,IACzCG,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAA,QACEC,KAAK,kBACLC,SAA0B,QAAjBZ,EAAAK,EAAKG,oBAAY,IAAAR,GAAQ,QAARC,EAAjBD,EAAmBc,cAAM,IAAAb,OAAR,EAAjBA,EAA2Bc,UAAW,KAEjDL,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAAST,IACpCO,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASL,IACzCH,EACA,C,6GCbP,UA3BmBN,IAAyB,IAADkB,EAAA,IAAvB,KAAEC,EAAI,SAAEC,GAAUpB,EACpC,MAAMqB,GAAkC,QAAtBH,EAAAC,EAAKZ,KAAKG,oBAAY,IAAAQ,OAAA,EAAtBA,EAAwBb,QAAS,UAC7CiB,EAAQH,EAAKI,kBAAkBC,MAErC,OACEZ,EAAAA,cAACa,EAAAA,GAAM,CAACL,SAAUA,EAAUf,MAAOgB,GACf,IAAjBC,EAAMI,OACLd,EAAAA,cAAA,SAAG,mBAEHA,EAAAA,cAAA,MAAIe,UAAU,cACXL,EAAMM,KAAIC,IACT,MAAMxB,EAAQwB,EAAKC,YAAYzB,OAASwB,EAAKE,OAAOC,KACpD,OACEpB,EAAAA,cAAA,MAAIqB,IAAKJ,EAAKE,OAAOC,KAAML,UAAU,oBACnCf,EAAAA,cAACsB,EAAAA,KAAI,CAACC,GAAIN,EAAKE,OAAOC,MACpBpB,EAAAA,cAAA,MAAIe,UAAU,qBAAqBtB,IAErCO,EAAAA,cAAA,KAAGe,UAAU,oBAAoBE,EAAKC,YAAYM,MAC/C,KAKN,EAMN,MAAMC,EAAOA,IAAMzB,EAAAA,cAAC0B,EAAAA,EAAG,CAACjC,MAAM,S","sources":["webpack://Z Notes/./src/components/seo.js","webpack://Z Notes/./src/pages/index.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotesIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || \"Zâ€‘Notes\"\n  const notes = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      {notes.length === 0 ? (\n        <p>No notes found.</p>\n      ) : (\n        <ul className=\"posts-list\">\n          {notes.map(note => {\n            const title = note.frontmatter.title || note.fields.slug\n            return (\n              <li key={note.fields.slug} className=\"posts-list__item\">\n                <Link to={note.fields.slug}>\n                  <h2 className=\"posts-list__title\">{title}</h2>\n                </Link>\n                <p className=\"posts-list__date\">{note.frontmatter.date}</p>\n              </li>\n            )\n          })}\n        </ul>\n      )}\n    </Layout>\n  )\n}\n\nexport default NotesIndex\n\nexport const Head = () => <Seo title=\"Notes\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","React","name","content","property","social","twitter","_data$site$siteMetada","data","location","siteTitle","notes","allMarkdownRemark","nodes","Layout","length","className","map","note","frontmatter","fields","slug","key","Link","to","date","Head","Seo"],"sourceRoot":""}